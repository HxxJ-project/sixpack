<html>
  <head>
    <meta charset="utf-8" />
    <title>jsQR Demo</title>
    <script src="//www.sixpack.pro/js/jsQR.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Ropa+Sans" rel="stylesheet" />
    <style>
      body {
        font-family: 'Ropa Sans', sans-serif;
        color: #333;
        max-width: 640px;
        margin: 0 auto;
        position: relative;
      }

      #githubLink {
        position: absolute;
        right: 0;
        top: 12px;
        color: #2d99ff;
      }

      h1 {
        margin: 10px 0;
        font-size: 40px;
      }

      #loadingMessage {
        text-align: center;
        padding: 40px;
        background-color: #eee;
      }

      #canvas {
        width: 100%;
      }

      #output {
        margin-top: 20px;
        background: #eee;
        padding: 10px;
        padding-bottom: 0;
      }

      #output div {
        padding-bottom: 10px;
        word-wrap: break-word;
      }

      #noQRFound {
        text-align: center;
      }
    </style>
  </head>
  <body>
    <!-- <h1>jsQR Demo</h1>
    <a id="githubLink" href="https://github.com/cozmo/jsQR">View documentation on Github</a>
    <p>Pure JavaScript QR code decoding library.</p> -->
    <div id="loadingMessage">🎥 Unable to access video stream (please make sure you have a webcam enabled)</div>
    <canvas id="canvas" hidden></canvas>
    <div id="output" hidden>
      <div id="outputMessage">No QR code detected.</div>
      <div hidden><b>Data:</b> <span id="outputData"></span></div>
    </div>
    <script>
      var video = document.createElement('video');
      var canvasElement = document.getElementById('canvas');
      var canvas = canvasElement.getContext('2d');
      var loadingMessage = document.getElementById('loadingMessage');
      var outputContainer = document.getElementById('output');
      var outputMessage = document.getElementById('outputMessage');
      var outputData = document.getElementById('outputData');

      function drawLine(begin, end, color) {
        canvas.beginPath();
        canvas.moveTo(begin.x, begin.y);
        canvas.lineTo(end.x, end.y);
        canvas.lineWidth = 4;
        canvas.strokeStyle = color;
        canvas.stroke();
      }

      // Use facingMode: environment to attemt to get the front camera on phones
      navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } }).then(function (stream) {
        video.srcObject = stream;
        video.setAttribute('playsinline', true); // required to tell iOS safari we don't want fullscreen
        video.play();
        requestAnimationFrame(tick);
      });

      async function tick() {
        loadingMessage.innerText = '⌛ Loading video...';
        if (video.readyState === video.HAVE_ENOUGH_DATA) {
          loadingMessage.hidden = true;
          canvasElement.hidden = false;
          outputContainer.hidden = false;

          canvasElement.height = video.videoHeight;
          canvasElement.width = video.videoWidth;
          canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);
          var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);
          var code = jsQR(imageData.data, imageData.width, imageData.height, {
            inversionAttempts: 'dontInvert',
          });
          if (code) {
            drawLine(code.location.topLeftCorner, code.location.topRightCorner, '#FF3B58');
            drawLine(code.location.topRightCorner, code.location.bottomRightCorner, '#FF3B58');
            drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, '#FF3B58');
            drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, '#FF3B58');
            outputMessage.hidden = true;
            outputData.parentElement.hidden = false;
            outputData.innerText = code.data;

            const urlParams = new URLSearchParams(window.location.search);
            const gymId = +urlParams.get('id');

            const now = +code.data.split('=')[1].split('&')[0];
            const userId = +code.data.split('=')[2];

            await axios
              .get(`/api/qrcode/${userId}`, {
                headers: {
                  accesstoken: `${localStorage.getItem('at')}`,
                  refreshtoken: `${localStorage.getItem('rt')}`,
                },
              })
              .then(async (res) => {
                if (res.data[0] === null) {
                  alert('❌❌ 식스팩 멤버십 회원이 아닙니다. ❌❌');
                  return;
                }
                if (res.data[1] >= 1) {
                  alert('❌❌ 금일 이용 횟수를 초과하였습니다. ❌❌');
                  return;
                }

                await axios
                  .get(`/api/qrcode/userHistory/${userId}`, {
                    headers: {
                      accesstoken: `${localStorage.getItem('at')}`,
                      refreshtoken: `${localStorage.getItem('rt')}`,
                    },
                  })
                  .then((res) => {
                    const useGymIds = res.data.map((data) => data.gymId);
                    const useGymId = [...new Set(useGymIds)];

                    for (let i = 0; i < res.data.length; i++) {
                      if (res.data[i].user.membership === 'Basic') {
                        if (res.data[i].gym.gymType !== '헬스장') {
                          alert('❌❌ 출입 가능한 가맹점이 아닙니다. ❌❌');
                          return;
                        }

                        if (useGymId.length >= 3 && !useGymId.includes(gymId)) {
                          alert('❌❌ 이번달은 더 이상 새로운 가맹점을 이용하실 수 없습니다. ❌❌');
                          return;
                        }
                      }

                      if (res.data[i].user.membership === 'Standard') {
                        let CrossfitOrPilates = false;
                        res.data.forEach((item) => {
                          if (item.gym.gymType === '크로스핏' || item.gym.gymType === '필라테스') {
                            if (CrossfitOrPilates) {
                              alert('❌❌ 이번달은 이용 불가능합니다. ❌❌');
                              return;
                            } else {
                              CrossfitOrPilates = true;
                            }
                          }
                        });
                        if (useGymId.length >= 3 && !useGymId.includes(gymId)) {
                          alert('❌❌ 이번달은 더 이상 새로운 가맹점을 이용하실 수 없습니다. ❌❌');
                          return;
                        }
                      }

                      if (res.data[i].user.membership === 'Premium') {
                        if (useGymId.length >= 3 && !useGymId.includes(gymId)) {
                          alert('❌❌ 이번달은 더 이상 새로운 가맹점을 이용하실 수 없습니다. ❌❌');
                          return;
                        }
                      }
                    }
                    axios
                      .post(
                        `/api/qrcode/${now}/${userId}/${gymId}`,
                        { userId, gymId },
                        {
                          headers: {
                            accesstoken: `${localStorage.getItem('at')}`,
                            refreshtoken: `${localStorage.getItem('rt')}`,
                          },
                        }
                      )
                      .then((res) => {
                        alert('✅✅ 식스팩 회원 인증이 완료되었습니다. ✅✅');
                      })
                      .catch((err) => {
                        console.log(err);
                      });
                  })
                  .catch((err) => {
                    console.log(err);
                  });
              })
              .catch((err) => {
                console.log(err);
              });
          } else {
            outputMessage.hidden = false;
            outputData.parentElement.hidden = true;
          }
        }
        requestAnimationFrame(tick);
      }
    </script>
  </body>
</html>
